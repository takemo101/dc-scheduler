@startuml robustness-sent_message

actor 定期処理システム
boundary Discordウェブフック #green
control 処理時刻に予約配信があるかチェックする
control 処理時刻に定期配信があるかチェックする
control 対象の配信メッセージを取得する
control 対象のボットを取得する
control ウェブフックURLを元に配信する
control メッセージ配信を追加する
entity ボット #blue
entity 配信メッセージ #blue
entity 定期タイミング #blue
entity メッセージ配信 #blue

定期処理システム --> 処理時刻に予約配信があるかチェックする
定期処理システム --> 処理時刻に定期配信があるかチェックする
処理時刻に予約配信があるかチェックする --> 対象の配信メッセージを取得する :予約配信が存在している場合
処理時刻に定期配信があるかチェックする --> 対象の配信メッセージを取得する :定期配信が存在している場合
処理時刻に予約配信があるかチェックする -- 配信メッセージ
処理時刻に定期配信があるかチェックする -- 配信メッセージ
処理時刻に定期配信があるかチェックする -- 定期タイミング
対象の配信メッセージを取得する --> 対象のボットを取得する :配信メッセージリストを参照する
対象のボットを取得する --> ウェブフックURLを元に配信する
対象のボットを取得する -- ボット
ウェブフックURLを元に配信する --> Discordウェブフック :ウェブフックURLにメッセージを送信
Discordウェブフック --> メッセージ配信を追加する :レスポンス
メッセージ配信を追加する --> 対象の配信メッセージを取得する :次の配信メッセージを処理する
メッセージ配信を追加する -- メッセージ配信
@enduml
