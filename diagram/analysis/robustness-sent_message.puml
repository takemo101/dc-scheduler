@startuml robustness-sent_message

actor 定期処理システム
boundary 処理開始 #green
boundary Discordウェブフック #green
boundary 処理終了 #green
control 定期処理を開始する
control 処理時刻に一致する定期配信リストを取得する
control 処理時刻に一致する定期配信リストを取得する
control 対象の配信メッセージを取得する
control 対象のボットを取得する
control 対象のボットがアクティブかチェックする
control ウェブフックURLを元に配信する
control メッセージ配信を追加する
entity ボット #blue
entity 配信メッセージ #blue
entity 定期タイミング #blue
entity メッセージ配信 #blue

定期処理システム --> 処理開始
定期処理を開始する --> 処理開始
処理開始 --> 処理時刻に一致する予約配信リストを取得する
処理開始 --> 処理時刻に一致する定期配信リストを取得する
処理時刻に一致する予約配信リストを取得する --> 対象の配信メッセージを取得する :予約配信が存在している場合
処理時刻に一致する定期配信リストを取得する --> 対象の配信メッセージを取得する :定期配信が存在している場合
処理時刻に一致する予約配信リストを取得する -- 配信メッセージ
処理時刻に一致する定期配信リストを取得する -- 配信メッセージ
処理時刻に一致する定期配信リストを取得する -- 定期タイミング
対象の配信メッセージを取得する --> 対象のボットを取得する :配信メッセージリストを参照する
対象のボットを取得する --> 対象のボットがアクティブかチェックする
対象のボットがアクティブかチェックする --> 対象の配信メッセージを取得する :アクティブなボットではなかった場合
対象のボットがアクティブかチェックする --> ウェブフックURLを元に配信する
対象のボットがアクティブかチェックする -- ボット
対象のボットを取得する -- ボット
ウェブフックURLを元に配信する --> Discordウェブフック :ウェブフックURLにメッセージを送信
Discordウェブフック --> メッセージ配信を追加する :レスポンス
メッセージ配信を追加する --> 対象の配信メッセージを取得する :次の配信メッセージを処理する
メッセージ配信を追加する -- メッセージ配信
メッセージ配信を追加する --> 処理終了
@enduml
