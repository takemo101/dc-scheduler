@startuml class

package domain {
    package message {
        class Bot {
            id: BotID
            userID: UserID
            name: BotName
            avatar: BotAtatar
            webhook: DiscordWebbook
            active : boolean
            + {static} CreateBot(id: int, userID, int, name: string, avatar: string, webhook: string, active: boolean): Bot
            + Update(name: string, avatar: string, active: boolean)
            + ChangeActive(active: boolean)
            + IsActive(): boolean
        }

        class BotAtatarImage {
            header: multipart.FileHeader
            path: string
            + {static} NewBotAtatarImage(header :FileHeader, path string)
        }

        abstract PostMessage {
            id: PostMessageID
            bot: Bot
            message: Message
            messageType: MessageType
            sentMessages: SentMessage[]
            + Send(now: Datetime)
            + ChangeMessage(message: string)
            + HasSentMessage(): boolean
            + CanSent(): boolean
        }

        enum MessageType {
            SchedulePost
            ImmediatePost
            RegularPost
            + String(): string
        }

        class SchedulePost {
            reservationAt: ReservationAt
            sended: boolean
            + {static} CreateSchedulePost(id: int, message: string, reservationAt: Datetime, bot: Bot)
            + IsSended(): boolean
            + IsPassedReservationAt(now: Datetime): boolean
        }

        class RegularPost {
            timings: RegularTiming[]
            active: boolean
            + {static} NewRegularPost(id: int, message: string, bot: Bot): PostMessage
            + AddTiming(dayOfWeek: string, time: Time)
            + IsActive(): boolean
        }

        class ImmediatePost {
            sended: boolean
            + {static} CreateImmediatePost(id: int, message: string, bot: Bot): PostMessage
            + IsSended(): boolean
        }

        class RegularTiming {
            dayOfWeek: DayOfWeek
            time: Time
            + {static} NewRegularTiming(messageID: int, dayOfWeek: string, time: Time): RegularTiming
        }

        enum DayOfWeek {
            Sunday
            Monday
            Tuesday
            Wednesday
            Thursday
            Friday
            Saturday
            + String(): string
        }

        class SentMessage {
            message: Message
            sendedAt: SendedAt
            + {static} SendMessage(message: string, sendedAt: Datetime): SendMessage
        }

        class BotService {
            + IsDuplicate(bot: Bot): boolean
            + IsDuplicateWithoutSelf(bot Bot): boolean
        }

        interface BotRepository {
            + FindByID(id: BotID): Bot
            + Store(bot: Bot): BotID
            + Update(bot: Bot)
            + Delete(id: BotID)
            + ExistsByWebhook(webhook: DiscordWebbook)
            + ExistsByIDWebhook(id BotID, webhook: DiscordWebbook)
            + NextIdentity(): BotID
        }

        interface BotAtatarImageRepository {
            + Store(avatar: BotAtatarImage)
            + Update(avatar: BotAtatarImage)
            + Delete(avator: BotAvator)
        }

        interface PostMessageRepository {
            + Delete(id: PostMessageID)
            + NextIdentity(): PostMessageID
        }

        interface ImmediatePostRepository {
            + Store(immediate ImmediatePost): PostMessageID
            + Update(immediate ImmediatePost)
            + FindByID(id: PostMessageID): ImmediatePost
        }

        interface SchedulePostRepository {
            + SendList(at SendedAt)
            + Store(schedule SchedulePost): PostMessageID
            + Update(schedule SchedulePost)
            + FindByID(id: PostMessageID): SchedulePost
        }

        interface RegularPostRepository {
            + SendList(timing RegularTiming)
            + Store(schedule RegularPost): PostMessageID
            + Update(schedule RegularPost)
            + FindByID(id: PostMessageID): RegularPost
        }

        interface DiscordWebhookCheckAdapter {
            + Check(webhook: DiscordWebbook): boolean
        }

        interface DiscordMessageAdapter {
            + SendMessage(bot: Bot, message: Message)
        }
    }

    package admin {
        class Admin {
            id: AdminID
            name: Name
            email: Email
            hashPassword: HashPassword
            role: AdminRole
            + {static} CreateAdmin(id: int, name: string, email: string, password string, role: string): Admin
            + Update(name: string, email: string, password string, role: string)
            + ComparePassword(plainPass: string): boolean
            + CreateLoginAuth(admin Admin): AdminAuth
        }

        enum AdminRole {
            System
            Normal
            + String(): string
        }

        class AdminAuth {
            id: AdminID
            name: Name
            email: Email
            role: AdminRole
            + {static} HaveRole(role: string): boolean
        }

        class AdminService {
            + IsDuplicate(admin: Admin): boolean
            + IsDuplicateWithoutSelf(admin: Admin): boolean
        }

        interface AdminRepository {
            + Store(admin: Admin): AdminID
            + Update(admin: Admin)
            + FindByID(id: AdminID): Admin
            + FindByEmail(email Email): Admin
            + Delete(id: AdminID)
            + ExistsByEmail(email: Email): bool
            + ExistsByIDEmail(id AdminID, email Email): bool
            + NextIdentity(): AdminID
        }

        interface AdminAuthContext {
            + Login(auth: AdminAuth)
            + Logout()
            + AdminAuth(): AdminAuth
            + IsLogin(): boolean
        }
    }

    package user {
        class User {
            id: UserID
            name: Name
            email: Email
            hashPassword: HashPassword
            activationKey: ActivationKey
            active: boolean
            + {static} CreateAuthenticatedUser(id: int, name: string, email: string, password): User
            + {static} CreateTemporaryUser(id: int, name: string, email: string, password: string): User
            + Activation(key: string): boolean
            + IsActivated(): boolean
            + Update(name: string, email: string, password: string)
            + ComparePassword(plainPass: string): boolean
            + CreateLoginAuth(user: User): UserAuth
        }

        class UserAuth {
            id: UserID
            name: Name
            email: Email
        }

        class UserService {
            + IsDuplicate(user: User): boolean
            + IsDuplicateWithoutSelf(user: User): boolean
        }

        interface UserRepository {
            + Store(user: User): UserID
            + Update(user: User)
            + FindByID(id: UserID): User
            + FindByEmail(email Email): User
            + Delete(id: UserID)
            + ExistsByEmail(email: Email): bool
            + ExistsByIDEmail(id UserID, email Email): bool
            + NextIdentity(): UserID
        }

        interface UserAuthContext {
            + Login(auth: UserAuth)
            + Logout()
            + UserAuth(): UserAuth
            + IsLogin(): boolean
        }

    }
}

Bot -o PostMessage
PostMessage - MessageType
SentMessage --* PostMessage
PostMessage <|-- ImmediatePost
PostMessage <|-- SchedulePost
PostMessage <|-- RegularPost
RegularPost *-- RegularTiming
RegularTiming - DayOfWeek
Admin - AdminRole

BotRepository -- Bot
BotAtatarImageRepository -- BotAtatarImage
BotAtatarImage -- Bot
BotService -- BotRepository
BotService -- Bot
DiscordWebhookCheckAdapter -- Bot
DiscordMessageAdapter -- Bot
DiscordMessageAdapter -- PostMessage
PostMessageRepository -- PostMessage
ImmediatePostRepository --|> PostMessageRepository
SchedulePostRepository --|> PostMessageRepository
RegularPostRepository --|> PostMessageRepository
ImmediatePostRepository -- ImmediatePost
SchedulePostRepository -- SchedulePost
RegularPostRepository -- RegularPost
AdminAuth -- Admin
AdminRepository -- Admin
AdminService -- AdminRepository
AdminService -- AdminAuth
AdminAuthContext -- AdminAuth

UserAuth -- User
UserRepository -- User
UserService -- UserRepository
UserService -- UserAuth
UserAuthContext -- UserAuth
User -- Bot


@enduml
